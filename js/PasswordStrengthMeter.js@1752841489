;(function($, window, document, undefined) {
    var PasswordStrengthMeter = function(elem, options) {
        this.elem = elem;
        this.$elem = $(elem);
        this.options = options;
        self = this
    };
    PasswordStrengthMeter.prototype = {
        defaults: {
            minPasswordLength: 1,
        },
        init: function() {
            this.config = $.extend({}, this.defaults, this.options);
            this.$elem.on("keyup", function() {
                self.processPassword()
            })
        },
        processPassword: function() {
            var currentPassword = this.$elem.val();
            var progressBar = $('.password_progress .rounded');
            var progressBarWidth = 0;
            var progressBarDescription = '';
            if (currentPassword.length >= self.config.minPasswordLength) {
                var zxcvbnObj = zxcvbn(currentPassword);
                progressBar.data('score', zxcvbnObj.score);
                progressBar.attr('data-score', zxcvbnObj.score);
                $('[id*="pro_bg"]').html('');
                var count_tooltip=zxcvbnObj.score+1;
                var stages=new Array('','Poor','Weak','Better','Strong');
                if (count_tooltip>4) {
                    var count_tooltip=4;
                }
                $('#pro_bg'+count_tooltip).html('<span class="password_progress1 d-flex align-items-center justify-content-center text-white rounded fw_700 mx-auto">'+stages[count_tooltip]+'</span>');
                switch (zxcvbnObj.score) {
                case 0:
                    $('[id*="pro_bg"]').removeAttr('class');
                    $('#pro_bg1').addClass('pro_bg1');
                    break;
                case 1:
                    $('#pro_bg2,#pro_bg3,#pro_bg4').removeAttr('class');
                    $('#pro_bg2').addClass('pro_bg2');
                    $('#pro_bg1').addClass('pro_bg1');
                    break;
                case 2:
                    $('#pro_bg3,#pro_bg4').removeAttr('class');
                    $('#pro_bg3').addClass('pro_bg3');
                    $('#pro_bg2').addClass('pro_bg2');
                    $('#pro_bg1').addClass('pro_bg1');
                    break;
                case 3:
                    $('#pro_bg4').removeAttr('class');
                    $('#pro_bg4').addClass('pro_bg4');
                    $('#pro_bg3').addClass('pro_bg3');
                    $('#pro_bg2').addClass('pro_bg2');
                    $('#pro_bg1').addClass('pro_bg1');
                    break;
                case 4:
                    $('#pro_bg4').removeAttr('class');
                    $('#pro_bg4').addClass('pro_bg4');
                    $('#pro_bg3').addClass('pro_bg3');
                    $('#pro_bg2').addClass('pro_bg2');
                    $('#pro_bg1').addClass('pro_bg1');
                    break
                }
            } else {
                progressBarWidth = 0;
                progressBarDescription = '';
                $('[id*="pro_bg"]').removeAttr('class');
                $('[id*="pro_bg"]').html('');
            }
            progressBar.css('width', progressBarWidth + '%');
        }
    };
    PasswordStrengthMeter.defaults = PasswordStrengthMeter.prototype.defaults;
    $.fn.PasswordStrengthMeter = function(options) {
        return this.each(function() {
            new PasswordStrengthMeter(this,options).init()
        })
    }
}
)(jQuery, window, document);
